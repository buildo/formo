(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{74:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return r})),t.d(n,"toc",(function(){return l})),t.d(n,"default",(function(){return c}));var a=t(3),i=t(7),s=(t(0),t(87)),o={id:"quick-start",title:"Quick start",sidebar_label:"Quick start",slug:"/"},r={unversionedId:"quick-start",id:"quick-start",isDocsHomePage:!1,title:"Quick start",description:"Installation",source:"@site/docs/quick-start.md",slug:"/",permalink:"/useFormo/",editUrl:"https://github.com/buildo/useFormo/edit/main/website/docs/quick-start.md",version:"current",sidebar_label:"Quick start",sidebar:"someSidebar",next:{title:"Recommended patterns",permalink:"/useFormo/recommended-patterns"}},l=[{value:"Installation",id:"installation",children:[]},{value:"Example",id:"example",children:[]}],m={toc:l};function c(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(s.b)("wrapper",Object(a.a)({},m,t,{components:n,mdxType:"MDXLayout"}),Object(s.b)("h2",{id:"installation"},"Installation"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre"},"yarn install useFormo\n")),Object(s.b)("div",{className:"admonition admonition-important alert alert--info"},Object(s.b)("div",{parentName:"div",className:"admonition-heading"},Object(s.b)("h5",{parentName:"div"},Object(s.b)("span",{parentName:"h5",className:"admonition-icon"},Object(s.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(s.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"important")),Object(s.b)("div",{parentName:"div",className:"admonition-content"},Object(s.b)("p",{parentName:"div"},Object(s.b)("inlineCode",{parentName:"p"},"useFormo")," assumes ",Object(s.b)("inlineCode",{parentName:"p"},"fp-ts")," and ",Object(s.b)("inlineCode",{parentName:"p"},"react")," as peer dependencies, so make you have\nthem installed"))),Object(s.b)("h2",{id:"example"},"Example"),Object(s.b)("p",null,"Here's a very basic example of how you ",Object(s.b)("em",{parentName:"p"},"may")," use ",Object(s.b)("inlineCode",{parentName:"p"},"useFormo"),"."),Object(s.b)("p",null,"In the next sections we will see some reccomendations on how to make it even\nmore convenient to use."),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-tsx"},'import { validations, useFormo } from "useFormo";\nimport { taskEither, option, array } from "fp-ts";\nimport { pipe, constNull } from "fp-ts/function";\n\nfunction MyForm() {\n  const { fieldProps, handleSubmit } = useFormo(\n    {\n      initialValues: {\n        fullName: "",\n        acceptsTerms: false,\n      },\n      fieldValidators: () => ({\n        acceptsTerms: validators.checked(\n          "You must accept terms and conditions"\n        ),\n      }),\n    },\n    {\n      onSubmit: (values) => taskEither.right(values),\n    }\n  );\n\n  return (\n    <form>\n      <div>\n        <label for={fieldProps("fullName").name} />\n        <input\n          type="text"\n          id={fieldProps("fullName").name}\n          name={fieldProps("fullName").name}\n          value={fieldProps("fullName").value}\n          onChange={(e) =>\n            fieldProps("fullName").onChange(e.currentTarget.value)\n          }\n          onBlur={fieldProps("fullName").onBlur}\n        />\n      </div>\n\n      <div>\n        <label for={fieldProps("acceptsTerms").name} />\n        <input\n          type="text"\n          id={fieldProps("acceptsTerms").name}\n          name={fieldProps("acceptsTerms").name}\n          value={fieldProps("acceptsTerms").value}\n          onChange={(e) =>\n            fieldProps("acceptsTerms").onChange(e.currentTarget.checked)\n          }\n          onBlur={fieldProps("acceptsTerms").onBlur}\n        />\n        {pipe(\n          fieldProps("acceptsTerms"),\n          option.fold(constNull, (issues) =>\n            pipe(\n              issues,\n              array.map((issue) => <span key={issue}>{issue}</span>)\n            )\n          )\n        )}\n      </div>\n\n      <button type="submit" onClick={handleSubmit}>\n        Submit\n      </button>\n    </form>\n  );\n}\n')))}c.isMDXComponent=!0}}]);