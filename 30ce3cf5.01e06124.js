(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{73:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return s})),t.d(n,"toc",(function(){return p})),t.d(n,"default",(function(){return d}));var a=t(3),r=t(7),i=(t(0),t(87)),o={id:"recommended-patterns",title:"Recommended patterns"},s={unversionedId:"recommended-patterns",id:"recommended-patterns",isDocsHomePage:!1,title:"Recommended patterns",description:"In order to make the best out of formo we recommend a few patterns.",source:"@site/docs/recommended-patterns.md",slug:"/recommended-patterns",permalink:"/formo/recommended-patterns",editUrl:"https://github.com/buildo/formo/edit/main/website/docs/recommended-patterns.md",version:"current",sidebar:"someSidebar",previous:{title:"Quick start",permalink:"/formo/"},next:{title:"Validating fields",permalink:"/formo/validating-fields"}},p=[{value:"Avoid using native form elements directly",id:"avoid-using-native-form-elements-directly",children:[]},{value:"Define a shared type for field issues",id:"define-a-shared-type-for-field-issues",children:[]}],l={toc:p};function d(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,"In order to make the best out of ",Object(i.b)("inlineCode",{parentName:"p"},"formo")," we recommend a few patterns."),Object(i.b)("h2",{id:"avoid-using-native-form-elements-directly"},"Avoid using native form elements directly"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"formo"),"'s utility functions are designed to return precise and type-safe data.\nFor instance, you may notice that ",Object(i.b)("inlineCode",{parentName:"p"},"onChange")," accepts a precise type (matching\n",Object(i.b)("inlineCode",{parentName:"p"},"value"),"), as opposed to a more generic ",Object(i.b)("inlineCode",{parentName:"p"},"Event"),"."),Object(i.b)("p",null,"For this reason, we recommend defining your own wrappers for native form\nelements, in order to gain type-safety."),Object(i.b)("p",null,"It's likely that you are already be doing this in order to provide other\ncustomizations for your project, so this is normally not a great change."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"formo")," provides a ",Object(i.b)("inlineCode",{parentName:"p"},"FieldProps")," type that helps you create custom components for\nyour form elements."),Object(i.b)("p",null,"For example, you may define your own ",Object(i.b)("inlineCode",{parentName:"p"},"TextField")," field as:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},'import { FieldProps } from "formo";\nimport { option, array } from "fp-ts";\n\ntype Props = FieldProps<string, string, string> & {\n  placeholder: string;\n};\n\nexport function TextField(props: Props) {\n  return (\n    <div>\n      <label>{props.label}</label>\n      <input\n        name={props.name}\n        type="text"\n        value={props.value}\n        onChange={(e) => props.onChange(e.currentTarget.value)}\n        onBlur={props.onBlur}\n        disabled={props.disabled}\n      />\n      {pipe(\n        props.issues,\n        option.fold(constNull, (issues) =>\n          pipe(\n            issues,\n            array.map((issue) => <span key={issue}>{issue}</span>)\n          )\n        )\n      )}\n    </div>\n  );\n}\n')),Object(i.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(i.b)("div",{parentName:"div",className:"admonition-heading"},Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",{parentName:"h5",className:"admonition-icon"},Object(i.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(i.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),Object(i.b)("div",{parentName:"div",className:"admonition-content"},Object(i.b)("p",{parentName:"div"},"You'll notice that ",Object(i.b)("inlineCode",{parentName:"p"},"FieldProps")," has three type parameters."),Object(i.b)("ul",{parentName:"div"},Object(i.b)("li",{parentName:"ul"},"The first one is the value type."),Object(i.b)("li",{parentName:"ul"},"The second one is the label type (which may or may not be a string)"),Object(i.b)("li",{parentName:"ul"},"The third one is the field error type")),Object(i.b)("p",{parentName:"div"},"In this example we've used ",Object(i.b)("inlineCode",{parentName:"p"},"string")," for all of them, but in a real project you\nmay have more specific types for the label (think of something like\n",Object(i.b)("inlineCode",{parentName:"p"},"LocalizedString"),", a ",Object(i.b)("inlineCode",{parentName:"p"},"string")," which has been localized) and for the field error\n(perhaps a complex error object with additional info)"))),Object(i.b)("p",null,"Once you've done that, you can now see how ",Object(i.b)("inlineCode",{parentName:"p"},"formo")," utility methods (such as\n",Object(i.b)("inlineCode",{parentName:"p"},"fieldProps"),") become very convenient to use:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-tsx"},'import { useFormo, validators } from "formo";\nimport { taskEither } from "fp-ts";\n\nfunction MyForm() {\n  const { fieldProps } = useFormo(\n    {\n      initialValues: {\n        name: "",\n      },\n      fieldValidators: () => ({\n        name: validators.maxLength(10, false),\n      }),\n    },\n    {\n      onSubmit: (values) => taskEither.right(values),\n    }\n  );\n\n  return (\n    <form>\n      <TextField\n        label="Name"\n        placeholder="Ada Lovelace"\n        {...fieldProps("name")}\n      />\n    </form>\n  );\n}\n')),Object(i.b)("h2",{id:"define-a-shared-type-for-field-issues"},"Define a shared type for field issues"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"formo")," is agnostic in the specific type you use for field issues, but it's\nhighly recommended to define a fixed type for this and re-use it across your\napplication."),Object(i.b)("p",null,"For instance:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},'type Severity = "error" | "warning";\ntype FieldIssue = { message: string; severity: Severity };\n\nfunction error(message: string): FieldIssue {\n  return { message, severity: "error" };\n}\nfunction warning(message: string): FieldIssue {\n  return { message, severity: "warning" };\n}\n')),Object(i.b)("p",null,"and then use it accordingly:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},'useFormo({\n  initialValues: { name: "" },\n  fieldValidators: {\n    name: validators.minLength(2, error("Name is too short")),\n  },\n});\n')),Object(i.b)("p",null,"With the same spirit, this should also be the type used by your field\ncomponents, so the ",Object(i.b)("inlineCode",{parentName:"p"},"TextField")," example above would have these props instead:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-tsx"},"type Props = FieldProps<string, string, FieldIssue> & {\n  placeholder: string;\n};\n")))}d.isMDXComponent=!0}}]);